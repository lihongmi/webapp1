* {
	padding: 0;
	margin: 0;
}
li{list-style-type: none;}
a{text-decoration: none;}
@greyColor: #ADADAD;
@rootSize: 23.4375*2;

.rem(font-size, @value) {
	font-size: @value/@rootSize;
};
.rem(background-position, @left, @top) {
	background-position: @left/@rootSize @top/@rootSize;
};
.rem(background-position, @value) {
	background-position: @value/@rootSize;
};
.rem(background-size, @width, @height) {
	background-size: @width/@rootSize @height/@rootSize;
};
.rem(width, @value) {
	width: @value/@rootSize;
};
.rem(min-width, @value) {
  min-width: @value/@rootSize;
};

.rem(max-width, @value) {
  max-width: @value/@rootSize;
};
.rem(height, @value) {
	height: @value/@rootSize;
}
.rem(min-height, @value) {
  min-height: @value/@rootSize;
}
.rem(border-radius, @value) {
  border-radius: @value/@rootSize;
}
.rem(max-height, @value) {
  max-height: @value/@rootSize;
}
.rem(top, @value) {
	top: @value/@rootSize;
}
.rem(left, @value) {
	left: @value/@rootSize;
}
.rem(bottom, @value) {
	bottom: @value/@rootSize;
}
.rem(right, @value) {
	right: @value/@rootSize;
}
.rem(line-height, @value) {
	line-height: @value/@rootSize;
}
.rem(margin-top, @value) {
	margin-top: @value/@rootSize;
}
.rem(margin-bottom, @value) {
	margin-bottom: @value/@rootSize;
}
.rem(margin-left, @value) {
	margin-left: @value/@rootSize;
}
.rem(margin-right, @value) {
	margin-right: @value/@rootSize;
} 
.rem(margin, @top, @right, @bottom, @left) {
	margin: (@top/@rootSize) @right/@rootSize @bottom/@rootSize @left/@rootSize;
}
.rem(padding-top, @value) {
	padding-top: @value/@rootSize;
}
.rem(padding-bottom, @value) {
	padding-bottom: @value/@rootSize;
}
.rem(padding-left, @value) {
	padding-left: @value/@rootSize;
}
.rem(padding-right, @value) {
	padding-right: @value/@rootSize;
} 
.rem(padding, @top, @right, @bottom, @left) {
	padding: @top/@rootSize @right/@rootSize @bottom/@rootSize @left/@rootSize;
}
.rem(text-indent, @value) {
	text-indent: @value/@rootSize;
}
.rem(border,@value,@style,@color){
	border: @value/@rootSize @style @color;
}
.rem(transform3d, @valueX, @valueY, @valueZ) {
  transform: translate3d(@valueX/@rootSize,@valueY/@rootSize,@valueZ/@rootSize)
}

.rem(-webkit-transform3d, @valueX, @valueY, @valueZ) {
  -webkit-transform: translate3d(@valueX/@rootSize,@valueY/@rootSize,@valueZ/@rootSize)
}